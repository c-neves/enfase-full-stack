schema {
  query: Query
  mutation: Mutation
}

type Query {
  node(id: ID!): Node
  questions(first: Int, after: String, last: Int, before: String): QuestionConnection
}

interface Node {
  id: ID!
}

type QuestionConnection {
  pageInfo: PageInfo!
  edges: [QuestionEdge]
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!
  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!
  # When paginating backwards, the cursor to continue.
  startCursor: String
  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type QuestionEdge {
  cursor: String!
  node: Question
}

type Question implements Node {
  id: ID!
  text: String!
  answer: Int!
  choices: [String!]!
}

type Mutation {
  createQuestion(input: CreateQuestionInput!): CreateQuestionPayload
  deleteQuestion(input: DeleteQuestionInput!): DeleteQuestionPayload
  # updateQuestion(input: UpdateQuestionInput!): UpdateQuestionPayload
}

input CreateQuestionInput {
  text: String!
  answer: Int!
  choices: [String!]!
  clientMutationId: String
}

type CreateQuestionPayload {
  question: QuestionEdge!
  clientMutationId: String
}

input DeleteQuestionInput {
  id: ID!
  clientMutationId: String
}

type DeleteQuestionPayload {
  id: ID!
  clientMutationId: String
}
