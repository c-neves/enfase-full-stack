schema {
  query: Query
}

type Query {
  todoList: TodoList

  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
}

interface Node {
  id: ID!
}

type TodoList implements Node {
  # The ID of an object
  id: ID!
  todos(status: String = "any", after: String, first: Int, before: String, last: Int): TodoConnection
  totalCount: Int!
  completedCount: Int!
}

# A connection to a list of items.
type TodoConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!
  # A list of edges.
  edges: [TodoEdge]
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!
  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!
  # When paginating backwards, the cursor to continue.
  startCursor: String
  # When paginating forwards, the cursor to continue.
  endCursor: String
}

# An edge in a connection.
type TodoEdge {
  # The item at the end of the edge
  node: Todo
  # A cursor for use in pagination
  cursor: String!
}

type Todo implements Node {
  id: ID!
  text: String!
  complete: Boolean!
}
